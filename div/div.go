// Package div provides a function for converting integer division
// into integer multiplication for chosen denominator values. This
// can be generalized to other operations based on equations: a = bq + r
package div

// Invert returns d, r, k to compute integer division n/e via the
// product multiply-add-shift operation: uintN(a*d+r) >> k.
//
// The value of e must be in the domain [1, 2**n) and n > 32 is undefined.
//
// Notationally, uintN is a type conversion of the intermediate result to a
// type exactly n*n bits wide before the shift operation:
//
//	n	N	type
//	8	16	uint16
//	16	32	uint32
//	32	64	uint64
//
func Invertn(e, n uint64) (d, r, k uint64) {
	ord := uint64(1 << (n - 1))
	k = n + log2(e)
	r = 1 << k
	d = r / e
	return d, ord / e * (r - d*e), k
}

// Invert returns d, r, k to compute integer division n/e via the
// product multiply-add-shift operation: (a*d+r) >> k. The values
// of e must be in the domain [1, 2**31). For any performance
// advantage, the return values should be reused for the given e.
func Invert31n(e uint64) (d, r, k uint64) {
	const exp = 32
	const ord = 1 << (exp - 1)
	k = exp + log2(e)
	r = 1 << k
	d = r / e
	return d, ord / e * (r - d*e), k
}

// mod is an example function; really shouldn't be using
// it since the function call overhead defeats the purpose
func mod(n, e uint64) uint64 {
	d, r, k := Invert31n(e)
	return (n*d + r) >> k
}

// div is an example function; really shouldn't be using
// it since the function call overhead defeats the purpose
func div(n, e uint64) uint64 {
	d, r, k := Invert31n(e)
	return (n*d + r) >> k
}

// avoids dependency on math/bits for older go releases
func log2(n uint64) (e uint64) {
	if n >= 1<<32 {
		n >>= 32
		e = 32
	}
	if n >= 1<<16 {
		n >>= 16
		e += 16
	}
	if n >= 1<<8 {
		n >>= 8
		e += 8
	}
	return e + uint64(len8tab[n]) - 1
}

// avoids dependency on math/bits for older go releases
var len8tab = [256]uint8{
	0x00, 0x01, 0x02, 0x02, 0x03, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
	0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
	0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
	0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
	0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
	0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
	0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
	0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
}
